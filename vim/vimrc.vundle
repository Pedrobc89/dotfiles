" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"" set the runtime path to include Vundle and initialize

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Fuzzy file finder system
Plugin 'ctrlpvim/ctrlp.vim'

" Search inside files
Plugin 'mileszs/ack.vim'

" SuperTab for youcompleteme and ultisnips together
Plugin  'ervandew/supertab'

" Tags
Plugin 'ludovicchabant/vim-gutentags'
Plugin 'majutsushi/tagbar'

" Snippets
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

" Commentary Plugin
Plugin 'scrooloose/nerdcommenter'

" NERDtree tree like file browser
Plugin 'scrooloose/nerdtree'

" Base 16 color plugin
Plugin 'chriskempson/base16-vim'

" Python
Plugin 'python.vim'
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'vim-python/python-syntax'

" Git commands direct from vim
Plugin 'tpope/vim-fugitive'

" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'

" Vim Surround by tpope
Plugin 'surround.vim'

" LSP - Language Server Protocol
Plugin 'prabirshrestha/vim-lsp'

" Asyncomplete - autocomplete solution
Plugin 'prabirshrestha/asyncomplete.vim'
Plugin 'prabirshrestha/asyncomplete-lsp.vim'

" Asynchronous Lint Engine
Plugin 'dense-analysis/ale'

" ALE - LSP integration
Plugin 'rhysd/vim-lsp-ale'
Plugin 'mattn/vim-lsp-settings'

" Asyncomplete sources
Plugin 'prabirshrestha/asyncomplete-ultisnips.vim'
Plugin 'prabirshrestha/asyncomplete-tags.vim'
Plugin 'andreypopp/asyncomplete-ale.vim'
Plugin 'htlsne/asyncomplete-look'
Plugin 'laixintao/asyncomplete-gitcommit'

" Settingup React dev enviroment
Plugin 'maxmellon/vim-jsx-pretty'

" StatusBar
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Vim tmux navigator
Plugin 'christoomey/vim-tmux-navigator'

" Multicursor
Plugin 'mg979/vim-visual-multi'

"
Plugin 'fcpg/vim-osc52'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" let control p search hidden files"
let g:ctrlp_show_hidden = 1
" Ignore custom folders
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
" let g:ctrlp_user_command = 'fd --type f --color=never "" %s'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_use_caching = 1
let g:ctrlp_abbrev = {
  \ 'gmode': 'i',
  \ 'abbrevs': [
    \ {
      \ 'pattern': ' ',
      \ 'expanded': '',
      \ 'mode': 'pfrz',
    \ },
    \ ]
  \ }

" Ack settings
nnoremap <Leader>a :Ack!<Space>

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"
let g:UltiSnipsListSnippets="<F4>"
let g:UltiSnipsEditSplit="vertical"

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Ignore files
set wildignore+=*.pyc,*.o,*.obj,*.svn,*.swp,*.class,*.hg,*.DS_Store,*.min.*
let NERDTreeRespectWildIgnore=1
" Open NERDtree autmatically
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"Unset conflicted mappings
let g:NERDTreeMapJumpNextSibling = ''
let g:NERDTreeMapJumpPrevSibling = ''

" Automatically sets colorscheme based on shell theme
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" Airline preferences
let g:airline_theme='base16_monokai'
let g:airline#extensions#tabline#enabled = 1

" Python highllight self word
let g:python_highlight_all = 1

" Asyncomplete Settings
let g:asyncomplete_remove_duplicates=1
set completeopt=menuone,noinsert,noselect,preview
" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? asyncomplete#close_popup() : "\<cr>"
inoremap <expr> <tab> pumvisible() ? asyncomplete#close_popup() : "\<tab>"

inoremap <C-k> <UP>
inoremap <C-j> <Down>
inoremap <C-h> <Right>
inoremap <C-l> <Left>

" Asycomplete Sources
" ALE
au User asyncomplete_setup call asyncomplete#ale#register_source({
    \ 'name': 'reason',
    \ 'linter': 'flow',
    \ })
" UltiSnips
call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
      \ 'name': 'ultisnips',
      \ 'allowlist': ['*'],
      \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
      \ }))
" Dictionary
au User asyncomplete_setup call asyncomplete#register_source({
    \ 'name': 'look',
    \ 'allowlist': ['text', 'markdown'],
    \ 'completor': function('asyncomplete#sources#look#completor'),
    \ })
" Gicommit
au User asyncomplete_setup call asyncomplete#register_source({
    \ 'name': 'gitcommit',
    \ 'whitelist': ['gitcommit'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#gitcommit#completor')
    \ })
" Tags
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
    \ 'name': 'tags',
    \ 'allowlist': ['c'],
    \ 'completor': function('asyncomplete#sources#tags#completor'),
    \ 'config': {
    \    'max_file_size': 50000000,
    \  },
    \ }))

" ALE Settings
let g:ale_fix_on_save = 1
let g:ale_linters = {
      \ 'python': ['pylint', 'pyls', 'my-py', 'vim-lsp'],
      \ }
let g:ale_python_pylint_options = '--load-plugins pylint_django --disable=django-not-available'
let g:ale_fixers = {
      \   '*': ['remove_trailing_lines', 'trim_whitespace'],
      \'python': ['autopep8', 'reorder-python-imports', 'yapf']
      \}

"      \'javascript': ['prettier', 'eslint'],

" Tags
nmap <F8> :TagbarToggle<cr>

" Fugitive remap to 3way merge
nnoremap <leader>< :diffget //2<cr>
nnoremap <leader>> :diffget //3<cr>

" Vim + Tmux navigation
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

function! HighlightRepeats() range
  let lineCounts = {}
  let lineNum = a:firstline
  while lineNum <= a:lastline
    let lineText = getline(lineNum)
    if lineText != ""
      let lineCounts[lineText] = (has_key(lineCounts, lineText) ? lineCounts[lineText] : 0) + 1
    endif
    let lineNum = lineNum + 1
  endwhile
  exe 'syn clear Repeat'
  for lineText in keys(lineCounts)
    if lineCounts[lineText] >= 2
      exe 'syn match Repeat "^' . escape(lineText, '".\^$*[]') . '$"'
    endif
  endfor
endfunction

command! HighlightRepeats :call HighlightRepeats()
